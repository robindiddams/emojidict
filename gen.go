// +build ignore

// This program generates emojis.go. It can be invoked by running
// go generate
package main

import (
	"fmt"
	"html/template"
	"os"
	"strings"
	"time"

	"github.com/robindiddams/emojidict/scraper"
)

func main() {

	data, version, err := scraper.GetLatestEmojiFile(scraper.TestFileName)
	handle(err)
	lines := strings.Split(string(data), "\n")
	var emojis []scraper.EmojiLine
	for _, line := range lines {
		l, err := scraper.ParseEmojis(version, scraper.TestFileName, line)
		handle(err)
		if l == nil {
			// it happens ü§∑‚Äç‚ôÄÔ∏è
			continue
		}
		emojis = append(emojis, *l)
	}
	fmt.Printf("Emoji version %s (%d total)\n", version, len(emojis))
	// TODO: pull user from git config
	user := os.Getenv("USER")
	if user == "" {
		user = "robots"
	}
	doc := document{
		User:      user,
		Timestamp: time.Now().Format(time.RFC3339),
		Version:   version,
		Emojis:    emojis,
	}
	ef, err := os.Create("emojis.go")
	handle(err)
	defer ef.Close()
	handle(emojisTemplate.Execute(ef, doc))
	cf, err := os.Create("categories.go")
	handle(err)
	defer cf.Close()
	handle(categoriesTemplate.Execute(cf, doc))
}

func handle(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

type document struct {
	User      string
	Timestamp string
	Version   string
	Emojis    []scraper.EmojiLine
}

const docHeader = `// Code generated by go generate; DO NOT EDIT.
// This file was generated by {{ .User }} at
// {{ .Timestamp }}
// using data from emoji version
// {{ .Version }}
package emojidict
`

var emojisTemplate = template.Must(template.New("").Parse(docHeader + `

var (
{{- range $i, $emoji := .Emojis }}
	{{ $emoji.ProperName }} = Emoji{ {{- range $i, $hex := $emoji.CodePoints }}0x{{ $hex }},{{- end }}}
{{- end }}
)

`))

var categoriesTemplate = template.Must(template.New("").Parse(docHeader + `

// TODO: break these up into categories

// All is a list of every emoji
var All = []Emoji{
{{- range $i, $emoji := .Emojis }}
	{{ $emoji.ProperName }},
{{- end }}
}

`))
